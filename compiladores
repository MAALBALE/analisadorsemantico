//Tarea para el sabado 29 de abril

#include <iostream>
#include <string>
#include <vector>
using namespace std;

// Definición de la estructura Token
struct Token {
    string tipo;
    string valor;
};

// Función para obtener el siguiente token
Token ObtenerToken(string codigo, int &pos) {
    Token token;
    token.tipo = "";
    token.valor = "";

    // Ignorar espacios en blanco
    while (pos < codigo.size() && codigo[pos] == ' ')
        pos++;

    // Verificar si se alcanzó el final del código
    if (pos >= codigo.size())
        return token;

    // Identificar el tipo de token
    if (codigo[pos] == 'C') {
        // Token tipo "Circulo"
        token.tipo = "CIRCULO";
        token.valor = "Circulo";
        pos += 7;
    }
    else if (codigo[pos] == 'C') {
        // Token tipo "Cuadrado"
        token.tipo = "CUADRADO";
        token.valor = "Cuadrado";
        pos += 8;
    }
    else if (codigo[pos] == 'T') {
        // Token tipo "Triangulo"
        token.tipo = "TRIANGULO";
        token.valor = "Triangulo";
        pos += 9;
    }
    else if (isdigit(codigo[pos])) {
        // Token tipo "Valor numérico"
        token.tipo = "VALOR_NUMERICO";
        token.valor = "";
        while (pos < codigo.size() && isdigit(codigo[pos])) {
            token.valor += codigo[pos];
            pos++;
        }
    }
    else {
        // Token desconocido
        token.tipo = "DESCONOCIDO";
        token.valor = codigo[pos];
        pos++;
    }

    return token;
}

// Función para analizar el código
bool AnalizarCodigo(string codigo) {
    int pos = 0;
    Token token;

    // Verificar el token inicial
    token = ObtenerToken(codigo, pos);
    if (token.tipo != "CIRCULO" || token.valor != "Circulo")
        return false;

    // Analizar los tokens restantes
    while (pos < codigo.size()) {
        token = ObtenerToken(codigo, pos);
        if (token.tipo == "CIRCULO") {
            // Analizar el token "Circulo"
            Token x = ObtenerToken(codigo, pos);
            Token y = ObtenerToken(codigo, pos);
            Token r = ObtenerToken(codigo, pos);
            if (x.tipo != "VALOR_NUMERICO" || y.tipo != "VALOR_NUMERICO" || r.tipo != "VALOR_NUMERICO")
                return false;
        }
        else if (token.tipo == "CUADRADO") {
            // Analizar el token "Cuadrado"
            Token x = ObtenerToken(codigo, pos);
            Token y = ObtenerToken(codigo, pos);
            Token b = ObtenerToken(codigo, pos);
            Token h = ObtenerToken(codigo, pos);
            if (x.tipo != "VALOR_NUMERICO" || y.tipo != "VALOR_NUMERICO" || b.tipo != "VALOR_NUMERICO" || h.tipo != "VALOR_NUMERICO")
                return false;
        }
 else if (token.tipo == "TRIANGULO") {
    // Analizar el token "Triangulo"
    Token x = ObtenerToken(codigo, pos);
    Token y = ObtenerToken(codigo, pos);
    Token base = ObtenerToken(codigo, pos);
    if (x.tipo != "VALOR_NUMERICO" || y.tipo != "VALOR_NUMERICO" || base.tipo != "VALOR_NUMERICO")
        return false;
}

else if (token.tipo != "") {
// Token desconocido
return false;
}
}
return true;

}

// Función principal
int main() {
string codigo = "Circulo(20,10,10)\nCirculo(40,15,10)\nCirculo(60,30,10)\nCuadrado(60,10,10,10)\nCuadrado(10,10,10,10)\nTriangulo(60,30,10,10)\n";
bool es_valido = AnalizarCodigo(codigo);
if (es_valido) {
cout << "El código es válido" << endl;
}
else {
cout << "El código es inválido" << endl;
}

return 0;
}

